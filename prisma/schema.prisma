// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  username    String   @unique @db.VarChar(50)
  email       String   @unique @db.VarChar(100)
  password    String   @db.VarChar(255)
  profilePict String?  @map("profile_pict") @db.VarChar(500)
  role        UserRole @default(USER)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  notificationReads NotificationRead[]

  @@map("users")
}

model Device {
  id          String       @id @default(uuid()) @db.Uuid
  uniqueId    String       @map("unique_id")
  deviceName  String       @map("device_name") @db.VarChar(100)
  deviceTypes String[]     @map("device_types")
  status      DeviceStatus @default(offline)
  ipAddress   String?      @map("ip_address") @db.VarChar(50)
  lastSeen    DateTime?    @map("last_seen")
  createdAt   DateTime     @default(now()) @map("created_at")

  setting         Setting?
  sensorHistories SensorHistory[]
  notifications   Notification[]

  @@map("devices")
}

model Setting {
  id              String   @id @default(uuid()) @db.Uuid
  deviceId        String   @unique @map("device_id") @db.Uuid
  autoModeEnabled Boolean  @default(true) @map("auto_mode_enabled")
  scheduleEnabled Boolean  @default(false) @map("schedule_enabled")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  device    Device     @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  schedules Schedule[]

  @@map("settings")
}

model Schedule {
  id        String @id @default(uuid()) @db.Uuid
  settingId String @map("setting_id") @db.Uuid
  day       String @db.VarChar(3)
  onTime    String @map("on_time") @db.VarChar(5)
  offTime   String @map("off_time") @db.VarChar(5)

  setting Setting @relation(fields: [settingId], references: [id], onDelete: Cascade)

  @@unique([settingId, day])
  @@map("schedules")
}

model SensorHistory {
  id          String      @id @default(uuid()) @db.Uuid
  deviceId    String      @map("device_id") @db.Uuid
  triggerType TriggerType @map("trigger_type")
  lightStatus LightStatus @map("light_status")
  lightAction LightAction @map("light_action")
  fanStatus   FanStatus   @map("fan_status")
  fanAction   FanAction   @map("fan_action")
  detectedAt  DateTime    @map("detected_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("sensor_history")
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  deviceId  String           @map("device_id") @db.Uuid
  type      NotificationType
  title     String?          @db.Text
  message   String?          @db.Text
  sentAt    DateTime         @map("sent_at")
  createdAt DateTime         @default(now()) @map("created_at")

  device            Device             @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  notificationReads NotificationRead[]

  @@map("notifications")
}

model NotificationRead {
  id             String    @id @default(uuid()) @db.Uuid
  notificationId String    @map("notification_id") @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  isRead         Boolean   @default(false) @map("is_read")
  readAt         DateTime? @map("read_at")

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
  @@map("notification_reads")
}

enum UserRole {
  SUPERUSER
  USER
}

enum DeviceStatus {
  online
  offline
  connecting
  error
}

enum TriggerType {
  motion_detected
  manual
  scheduled
}

enum LightStatus {
  on
  off
}

enum LightAction {
  turned_on
  turned_off
}

enum FanStatus {
  on
  off
}

enum FanAction {
  turned_on
  turned_off
}

enum NotificationType {
  motion_detected
  device_status_change
  scheduled_reminder
}
