// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ROLE {
  user
  admin
}

model User {
  id              String    @id @default(uuid()) @db.Uuid
  username        String    @unique @db.VarChar(50)
  email           String    @unique @db.VarChar(100)
  confirmPassword String    @db.VarChar(255)
  password        String    @db.VarChar(255)
  role            ROLE      @default(user)
  profilePict     String?   @map("profile_pict") @db.VarChar(500)
  resetToken      String?   @map("reset_token") @db.VarChar(255)
  tokenExpires    DateTime? @map("token_expires")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  notificationReads NotificationRead[]

  @@map("users")
}

model Device {
  id           String       @id @default(uuid()) @db.Uuid
  deviceName   String       @map("device_name") @db.VarChar(100)
  deviceType   DeviceType   @default(camera) @map("device_type")
  status       DeviceStatus @default(offline)
  ipAddress    String       @map("ip_address") @db.VarChar(50)
  wifiSsid     String       @map("wifi_ssid") @db.VarChar(100)
  wifiPassword String       @map("wifi_password") @db.VarChar(255)
  lastSeen     DateTime?    @map("last_seen")
  createdAt    DateTime     @default(now()) @map("created_at")

  setting         Setting?
  sensorHistories SensorHistory[]
  notifications   Notification[]

  @@map("devices")
}

model Setting {
  id              String    @id @default(uuid()) @db.Uuid
  deviceId        String    @unique @map("device_id") @db.Uuid
  scheduleEnabled Boolean   @default(false) @map("schedule_enabled")
  autoModeEnabled Boolean   @default(true) @map("auto_mode_enabled")
  scheduleOnTime  DateTime? @map("schedule_on_time") @db.Time
  scheduleOffTime DateTime? @map("schedule_off_time") @db.Time
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model SensorHistory {
  id          String      @id @default(uuid()) @db.Uuid
  deviceId    String      @map("device_id") @db.Uuid
  triggerType TriggerType @map("trigger_type")
  lightStatus LightStatus @map("light_status")
  lightAction LightAction @map("light_action")
  detectedAt  DateTime    @map("detected_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("sensor_history")
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  deviceId  String           @map("device_id") @db.Uuid
  type      NotificationType
  title     String?          @db.Text
  message   String?          @db.Text
  sentAt    DateTime         @map("sent_at")
  createdAt DateTime         @default(now()) @map("created_at")

  device            Device             @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  notificationReads NotificationRead[]

  @@map("notifications")
}

model NotificationRead {
  id             String    @id @default(uuid()) @db.Uuid
  notificationId String    @map("notification_id") @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  isRead         Boolean   @default(false) @map("is_read")
  readAt         DateTime? @map("read_at")

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
  @@map("notification_reads")
}

enum DeviceType {
  light
  camera
}

enum DeviceStatus {
  online
  offline
  connecting
  error
}

enum TriggerType {
  motion_detected
  manual
  scheduled
  system
}

enum LightStatus {
  on
  off
}

enum LightAction {
  turned_on
  turned_off
}

enum NotificationType {
  motion_detected
  light_status
  scheduled_reminder
  device_offline
  device_online
}
